<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jp.prj.araku.list.mapper.IListMapper">

<select id="getTransInfo" resultType="Trans" parameterType="Trans">
select 
	seq_id
	, before_trans
	, after_trans
	, prd_cnt
	, etc_cntnt
	, jan_cd
	, date_format(register_date, '%Y/%m/%d') register_date
	, date_format(update_date, '%Y/%m/%d') update_date
from
	translation_info
<where>
	<choose>
		<when test="search_type =='srch'">
		<trim prefixOverrides="AND |OR ">
		<if test="keyword != null and keyword != ''"> 
		and (before_trans like '${keyword}' or after_trans like '${keyword}')
		</if>
		<if test="seq_id_list != null">
			and seq_id in
			<foreach item="item" index="index" collection="seq_id_list"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		</trim>
		</when>
		<when test="search_type =='screen'">
		<if test="keyword != null and keyword != ''"> 
		(before_trans like '%${keyword}%' or after_trans like '%${keyword}%')
		</if>
		</when>
		<otherwise>
		register_date between str_to_date(#{start_date}, '%Y/%m/%d %H:%i:%s') and now()
		</otherwise>
	</choose>
</where>	
order by register_date desc, update_date desc
</select>

<insert id="addTransInfo" parameterType="Trans" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into translation_info (before_trans, after_trans, prd_cnt, etc_cntnt)
values (#{before_trans}, #{after_trans}, #{prd_cnt}, #{etc_cntnt})
</insert>

<update id="modTransInfo" parameterType="Trans">
update 
	translation_info
set
	update_date = now()
	<if test="prd_cnt != null">
	, prd_cnt = #{prd_cnt}
	</if>
	<if test="etc_cntnt != null">
	, etc_cntnt = #{etc_cntnt}
	</if>
	<if test="before_trans != null">
	, before_trans = #{before_trans}
	</if>
	<if test="after_trans != null">
	, after_trans = #{after_trans}
	</if>
	<if test="jan_cd != null">
	, jan_cd = #{jan_cd}
	</if>
where
	seq_id = #{seq_id}
</update>

<delete id="delTransInfo" parameterType="String">
delete from
	translation_info
where
	seq_id = #{seq_id}
</delete>

<insert id="addTransResult" parameterType="TransResult" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into translation_result (trans_target_id, trans_target_type, result_text)
values (#{trans_target_id}, #{trans_target_type}, #{result_text})
</insert>

<update id="modTransResult" parameterType="TransResult">
update 
	translation_result
set
	result_text = #{result_text}
	, register_date = now()
<where>
	<if test="seq_id != null"> 
		seq_id = #{seq_id}
	</if>
	<if test="trans_target_id != null">
		trans_target_id = #{trans_target_id}
	</if>
	<if test="trans_target_id != null">
		and trans_target_type = #{trans_target_type}
	</if>
</where>	
</update>

<select id="getRegionMaster" resultType="RegionMaster" parameterType="RegionMaster">
select 
	b.seq_id
	, b.p_id
	, a.region_name parent_region_name
	, b.region_name
	, b.region_name_en
	, b.delivery_company
from 
	region_master a
inner join region_master b on a.seq_id = b.p_id
<where>
	<if test="keyword != null">
		b.region_name like '%${keyword}%' or b.region_name_en like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		b.seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<update id="modRegionMaster" parameterType="RegionMaster">
update
	region_master
set
	delivery_company = #{delivery_company}
where
	seq_id = #{seq_id}
</update>

<insert id="insertTranslationErr" parameterType="TransErr">
insert into translation_err (trans_target_id, trans_target_type, err_text)
values (#{trans_target_id}, #{trans_target_type}, #{err_text})
</insert>

<select id="getTranslationErr" resultType="String" parameterType="TransErr">
select
	seq_id
from
	translation_err
where
	trans_target_id = #{trans_target_id}
	and trans_target_type = #{trans_target_type}
</select>

<delete id="deleteTranslationErr" parameterType="TransErr">
delete from
	translation_err
where
	seq_id = #{seq_id}
	and trans_target_type = #{trans_target_type}
</delete>

<select id="getExceptionMaster" parameterType="ExceptionMaster" resultType="ExceptionMaster">
select
	seq_id
	, exception_data
from
	exception_master
<where>
	<if test="keyword != null">
		exception_data like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<insert id="insertExceptionMaster" parameterType="ExceptionMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into exception_master (exception_data) 
values (#{exception_data})
</insert>

<update id="updateExceptionMaster" parameterType="ExceptionMaster">
update exception_master
set exception_data = #{exception_data}
where seq_id = #{seq_id}
</update>

<delete id="deleteExceptionMaster" parameterType="String">
delete from exception_master
where seq_id = #{seq_id}
</delete>

<select id="getExceptionRegionMaster" parameterType="ExceptionRegionMaster" resultType="ExceptionRegionMaster">
select
	seq_id
	, exception_data
from
	exception_region_master
<where>
	<if test="keyword != null">
		exception_data like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<insert id="insertExceptionRegionMaster" parameterType="ExceptionRegionMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into exception_region_master (exception_data) 
values (#{exception_data})
</insert>

<update id="updateExceptionRegionMaster" parameterType="ExceptionRegionMaster">
update exception_region_master
set exception_data = #{exception_data}
, update_date = now()
where seq_id = #{seq_id}
</update>

<delete id="deleteExceptionRegionMaster" parameterType="String">
delete from exception_region_master
where seq_id = #{seq_id}
</delete>

<select id="getPrdCdMaster" parameterType="PrdCdMaster" resultType="PrdCdMaster">
select
  distinct
  pdm.seq_id
  , pdm.prd_cd
  , pdm.target_type
  , pdm.register_date
  , pdm.update_date
  <if test='target_type == "R"'>
  , ifnull(ri.product_name, rfi.product_name) prd_nm
  </if>
  <if test='target_type == "A"'>
  , ai.product_name prd_nm
  </if>
  <if test='target_type == "Q"'>
  , qi.product_name prd_nm
  </if>
from prdcd_master pdm
<if test='target_type == "R"'>
left outer join rakuten_info ri on pdm.prd_cd = ri.product_id
left outer join rakuten_frozen_info rfi on pdm.prd_cd = rfi.product_id
</if>
<if test='target_type == "A"'>
left outer join amazon_info ai on pdm.prd_cd = ai.order_item_id
</if>
<if test='target_type == "Q"'>
left outer join q10_info qi on pdm.prd_cd = qi.item_no
</if>
<where>
  <if test="target_type != null">
  target_type = #{target_type}
  </if>
  <if test="prd_cd != null and '' != prd_cd">
  and prd_cd like '%${prd_cd}%'
  </if>
</where>
order by pdm.seq_id desc
</select>

<select id="prdCdMasterExistChk" parameterType="PrdCdMaster" resultType="PrdCdMaster">
select
  prd_cd
  , target_type
from prdcd_master
where prd_cd = #{prd_cd}
</select>

<insert id="insertPrdCdMaster" parameterType="PrdCdMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into prdcd_master (prd_cd, target_type)
values(#{prd_cd}, #{target_type})
</insert>

<update id="updatePrdCdMaster" parameterType="PrdCdMaster">
update 
  prdcd_master
set 
  update_date = now()
  <if test="prd_cd != null">
  , prd_cd = #{prd_cd}
  </if>
where 
  seq_id = #{seq_id}
</update>

<delete id="deletePrdCdMaster" parameterType="String">
delete from 
  prdcd_master
where 
  seq_id = #{seq_id}
</delete>

<select id="getPrdTrans" resultType="PrdTrans" parameterType="PrdTrans">
select 
	seq_id
	, order_no
	, jan_cd
	, order_gbn
	, prd_master_hanei_gbn
	, prd_cnt
	, before_trans
	, after_trans
	, trans_target_type
	, date_format(register_date, '%Y/%m/%d') register_date
	, date_format(update_date, '%Y/%m/%d') update_date
from
	prd_trans_info
<where>
	<choose>
		<when test="search_type =='srch'">
		<trim prefixOverrides="AND |OR ">
		<if test="keyword != null and keyword != ''"> 
		and (before_trans like '${keyword}' or after_trans like '${keyword}')
		</if>
		<if test="seq_id_list != null">
			and seq_id in
			<foreach item="item" index="index" collection="seq_id_list"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		and trans_target_type = #{trans_target_type}
		</trim>
		</when>
		<when test="search_type =='screen'">
		<if test="keyword != null and keyword != ''"> 
		(before_trans like '%${keyword}%' or after_trans like '%${keyword}%')
		</if>
		</when>
		<when test="search_type == 'translate'">
		order_no = #{order_no}
		and after_trans = #{after_trans}
		</when>
		<when test="search_type == 'sum'">
		after_trans = #{after_trans}
		and trans_target_type = #{trans_target_type}
		</when>
		<otherwise>
		register_date between str_to_date(#{start_date}, '%Y/%m/%d %H:%i:%s') and now()
		and trans_target_type = #{trans_target_type}
		</otherwise>
	</choose>
</where>	
order by seq_id desc, update_date desc
</select>

<insert id="insertPrdTrans" parameterType="PrdTrans" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into prd_trans_info (order_no, jan_cd, before_trans, after_trans, order_gbn, prd_master_hanei_gbn, prd_cnt, trans_target_type)
values (#{order_no}, #{jan_cd}, #{before_trans}, #{after_trans}, #{order_gbn}, #{prd_master_hanei_gbn}, #{prd_cnt}, #{trans_target_type})
</insert>

<update id="updatePrdTrans" parameterType="PrdTrans">
update 
	prd_trans_info
set 
	update_date = now()
<if test="order_no != null and order_no != ''">
	, order_no = #{order_no}
</if>
<if test="jan_cd != null and jan_cd != ''">
	, jan_cd = #{jan_cd}
</if>
<if test="order_gbn != null and order_gbn != ''">
	, order_gbn = #{order_gbn}
</if>
<if test="before_trans != null and before_trans != ''">
	, before_trans = #{before_trans}
</if>
<if test="after_trans != null and after_trans != ''">
	, after_trans = #{after_trans}
</if>
<if test="prd_master_hanei_gbn != null and prd_master_hanei_gbn != ''">
	, prd_master_hanei_gbn = #{prd_master_hanei_gbn}
</if>
<if test="prd_cnt != null and prd_cnt != ''">
	, prd_cnt = #{prd_cnt}
</if>
where
	seq_id = #{seq_id}
</update>

<delete id="deletePrdTrans" parameterType="String">
delete from
	prd_trans_info
where
	seq_id = #{seq_id}
</delete>

<select id="getOrderSum" parameterType="OrderSum" resultType="OrderSum">
select 
	seq_id
	, jan_cd
	, prd_master_hanei_gbn
	, prd_sum
	, after_trans
	, target_type
	, date_format(register_date, '%Y/%m/%d') register_date
	, date_format(update_date, '%Y/%m/%d') update_date
from
	order_sum_info
<where>
<trim prefixOverrides="AND |OR ">
<if test="after_trans != null and after_trans != ''">
and after_trans = #{after_trans}
</if>
<if test="target_type != null and target_type != ''">
and target_type = #{target_type}
</if>
</trim>
</where>
</select>

<insert id="insertOrderSum" parameterType="OrderSum" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into order_sum_info (jan_cd, after_trans, prd_sum, prd_master_hanei_gbn, target_type)
values (#{jan_cd}, #{after_trans}, #{prd_sum}, #{prd_master_hanei_gbn}, #{target_type})
</insert>

<update id="updateOrderSum" parameterType="OrderSum">
update
  order_sum_info
set
  update_date = now()
<if test="jan_cd != null and jan_cd != ''">
  , jan_cd = #{jan_cd}
</if>
<if test="after_trans != null and after_trans != ''">
  , after_trans = #{after_trans}
</if>
<if test="prd_master_hanei_gbn != null and prd_master_hanei_gbn != ''">
  , prd_master_hanei_gbn = #{prd_master_hanei_gbn}
</if>
<if test="prd_sum != null and prd_sum != ''">
  , prd_sum = #{prd_sum}
</if>
where
  seq_id = #{seq_id}
</update>

<delete id="deleteOrderSum" parameterType="String">
delete from
  order_sum_info
where
  seq_id = #{seq_id}
</delete>

<select id="getEtc" parameterType="EtcMaster" resultType="EtcMaster">
select 
	seq_id
	, jan_cd
	, prd_cnt
	, prd_nm
	, target_type
	, date_format(register_date, '%Y/%m/%d') register_date
	, date_format(update_date, '%Y/%m/%d') update_date
from
	etc_master_info
<where>
<trim prefixOverrides="AND |OR ">
<if test="prd_nm != null and prd_nm != ''">
and prd_nm like '%${prd_nm}%'
</if>
<if test="target_type != null and target_type != ''">
and target_type = #{target_type}
</if>
</trim>
</where>
</select>

<insert id="insertEtc" parameterType="EtcMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into etc_master_info (jan_cd, prd_cnt, prd_nm, target_type)
values (#{jan_cd}, #{prd_cnt}, #{prd_nm}, #{target_type})
</insert>

<update id="updateEtc" parameterType="EtcMaster">
update
  etc_master_info
set
  update_date = now()
<if test="jan_cd != null and jan_cd != ''">
  , jan_cd = #{jan_cd}
</if>
<if test="prd_cnt != null and prd_cnt != ''">
  , prd_cnt = #{prd_cnt}
</if>
<if test="prd_nm != null and prd_nm != ''">
  , prd_nm = #{prd_nm}
</if>
where
  seq_id = #{seq_id}
</update>

<delete id="deleteEtc" parameterType="String">
delete from
  etc_master_info
where
  seq_id = #{seq_id}
</delete>
</mapper>
