<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jp.prj.araku.list.mapper.IListMapper">

<select id="getTransInfo" resultType="Trans" parameterType="Trans">
select 
	seq_id
	, before_trans
	, after_trans
	, date_format(register_date, '%Y/%m/%d') register_date
	, date_format(update_date, '%Y/%m/%d') update_date
from
	translation_info
<where>
	<choose>
		<when test="search_type =='srch'">
		<trim prefixOverrides="AND |OR ">
		<if test="keyword != null and keyword != ''"> 
		and (before_trans like '${keyword}' or after_trans like '${keyword}')
		</if>
		<if test="seq_id_list != null">
			and seq_id in
			<foreach item="item" index="index" collection="seq_id_list"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		</trim>
		</when>
		<when test="search_type =='screen'">
		<if test="keyword != null and keyword != ''"> 
		(before_trans like '%${keyword}%' or after_trans like '%${keyword}%')
		</if>
		</when>
		<otherwise>
		register_date between str_to_date(#{start_date}, '%Y/%m/%d %H:%i:%s') and now()
		</otherwise>
	</choose>
</where>	
order by register_date desc, update_date desc
</select>

<insert id="addTransInfo" parameterType="Trans" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into translation_info (before_trans, after_trans)
values (#{before_trans}, #{after_trans})
</insert>

<update id="modTransInfo" parameterType="Trans">
update 
	translation_info
set
	before_trans = #{before_trans}
	, after_trans = #{after_trans}
	, update_date = now()
where
	seq_id = #{seq_id}
</update>

<delete id="delTransInfo" parameterType="String">
delete from
	translation_info
where
	seq_id = #{seq_id}
</delete>

<insert id="addTransResult" parameterType="TransResult" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into translation_result (trans_target_id, trans_target_type, result_text)
values (#{trans_target_id}, #{trans_target_type}, #{result_text})
</insert>

<update id="modTransResult" parameterType="TransResult">
update 
	translation_result
set
	result_text = #{result_text}
	, register_date = now()
<where>
	<if test="seq_id != null"> 
		seq_id = #{seq_id}
	</if>
	<if test="trans_target_id != null">
		trans_target_id = #{trans_target_id}
	</if>
	<if test="trans_target_id != null">
		and trans_target_type = #{trans_target_type}
	</if>
</where>	
</update>

<select id="getRegionMaster" resultType="RegionMaster" parameterType="RegionMaster">
select 
	b.seq_id
	, b.p_id
	, a.region_name parent_region_name
	, b.region_name
	, b.region_name_en
	, b.delivery_company
from 
	region_master a
inner join region_master b on a.seq_id = b.p_id
<where>
	<if test="keyword != null">
		b.region_name like '%${keyword}%' or b.region_name_en like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		b.seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<update id="modRegionMaster" parameterType="RegionMaster">
update
	region_master
set
	delivery_company = #{delivery_company}
where
	seq_id = #{seq_id}
</update>

<insert id="insertTranslationErr" parameterType="TransErr">
insert into translation_err (trans_target_id, trans_target_type, err_text)
values (#{trans_target_id}, #{trans_target_type}, #{err_text})
</insert>

<select id="getTranslationErr" resultType="String" parameterType="TransErr">
select
	seq_id
from
	translation_err
where
	trans_target_id = #{trans_target_id}
	and trans_target_type = #{trans_target_type}
</select>

<delete id="deleteTranslationErr" parameterType="TransErr">
delete from
	translation_err
where
	seq_id = #{seq_id}
	and trans_target_type = #{trans_target_type}
</delete>

<select id="getExceptionMaster" parameterType="ExceptionMaster" resultType="ExceptionMaster">
select
	seq_id
	, exception_data
from
	exception_master
<where>
	<if test="keyword != null">
		exception_data like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<insert id="insertExceptionMaster" parameterType="ExceptionMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into exception_master (exception_data) 
values (#{exception_data})
</insert>

<update id="updateExceptionMaster" parameterType="ExceptionMaster">
update exception_master
set exception_data = #{exception_data}
where seq_id = #{seq_id}
</update>

<delete id="deleteExceptionMaster" parameterType="String">
delete from exception_master
where seq_id = #{seq_id}
</delete>

<select id="getExceptionRegionMaster" parameterType="ExceptionRegionMaster" resultType="ExceptionRegionMaster">
select
	seq_id
	, exception_data
from
	exception_region_master
<where>
	<if test="keyword != null">
		exception_data like '%${keyword}%'
	</if>
	<if test="seq_id_list != null">
		seq_id in
		<foreach item="item" index="index" collection="seq_id_list"
			open="(" separator="," close=")">
			#{item}
		</foreach>
	</if>
</where>
</select>

<insert id="insertExceptionRegionMaster" parameterType="ExceptionRegionMaster" useGeneratedKeys="true" keyProperty="seq_id" keyColumn="seq_id">
insert into exception_region_master (exception_data) 
values (#{exception_data})
</insert>

<update id="updateExceptionRegionMaster" parameterType="ExceptionRegionMaster">
update exception_region_master
set exception_data = #{exception_data}
, update_date = now()
where seq_id = #{seq_id}
</update>

<delete id="deleteExceptionRegionMaster" parameterType="String">
delete from exception_region_master
where seq_id = #{seq_id}
</delete>

</mapper>
